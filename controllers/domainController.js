import domainModel from '../models/domainModel.js';
import { config } from 'dotenv';
config();

/**
 * üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–º–µ–Ω—ã
 */
export const getDomain = async (req, res) => {
  try {
    const domains = await domainModel.find();

    if (!domains.length) {
      return res.status(404).json({ error: '–î–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    return res.status(200).json(domains);
  } catch (err) {
    console.error('[getDomain] –û—à–∏–±–∫–∞:', err);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–æ–≤' });
  }
};

/**
 * üîπ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω
 */
export const setDomain = async (req, res) => {
  try {
    const { domain } = req.body;

    if (!domain) {
      return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è' });
    }

    const existsDomain = await domainModel.findOne({ domain });
    if (existsDomain) {
      return res.status(400).json({ error: '–î–æ–º–µ–Ω —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω' });
    }

    const newDomain = await domainModel.create({
      domain,
      stability: [],
    });

    res.status(201).json(newDomain);
  } catch (err) {
    console.error('[setDomain] –û—à–∏–±–∫–∞:', err);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞' });
  }
};

/**
 * üîπ –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω
 */
export const deleteDomain = async (req, res) => {
  try {
    const { domain } = req.body;

    if (!domain) {
      return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è' });
    }

    const deletedDomain = await domainModel.findOneAndDelete({ domain });

    if (!deletedDomain) {
      return res.status(404).json({ error: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.status(200).json({ success: true, deletedDomain });
  } catch (err) {
    console.error('[deleteDomain] –û—à–∏–±–∫–∞:', err);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞' });
  }
};

/**
 * üîπ –ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω—ã –∏–∑ KT
 */
export const getKtDomains = async (req, res) => {
  try {
    const response = await fetch(`${process.env.KT_URI}/domains`, {
      method: 'GET',
      headers: {
        'Api-Key': process.env.KT_TOKEN,
        'content-type': 'application/json',
      },
    });

    const data = await response.json();
    res.status(200).json(data);
  } catch (err) {
    console.error('[getKtDomains] –û—à–∏–±–∫–∞:', err);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–æ–≤ —Å –ö–¢' });
  }
};
